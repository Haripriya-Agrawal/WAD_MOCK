Let's build a **Course Enrollment System** in **Angular** with:  
âœ… **User Registration**  
âœ… **User Login**  
âœ… **Profile Page to Display User Data**  
âœ… **Local Storage to Persist Data**  

---

## **Step 1: Install Angular & Create a New Project**  
### **1.1 Install Angular CLI (if not installed)**
```sh
npm install -g @angular/cli
```
### **1.2 Create a new Angular project**
```sh
ng new course-enrollment
cd course-enrollment
```
### **1.3 Start the Angular development server**
```sh
ng serve
```
Now open **http://localhost:4200/** in your browser.

---

## **Step 2: Create Required Components & Services**  
We'll create:  
- **Registration Component** (For User Signup)  
- **Login Component** (For User Authentication)  
- **Profile Component** (To Display User Data)  
- **Auth Service** (To Manage User Authentication & Data)  

Run these commands:
```sh
ng g c register
ng g c login
ng g c profile
ng g service auth
```
This creates:  
```
src/app/
  â”œâ”€â”€ register/
  â”œâ”€â”€ login/
  â”œâ”€â”€ profile/
  â”œâ”€â”€ auth.service.ts
```

---

## **Step 3: Set Up Routing**
Open `app.module.ts` and add **FormsModule** and **RouterModule**:
```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { RouterModule, Routes } from '@angular/router';
import { AppComponent } from './app.component';
import { RegisterComponent } from './register/register.component';
import { LoginComponent } from './login/login.component';
import { ProfileComponent } from './profile/profile.component';
import { AuthService } from './auth.service';

const routes: Routes = [
  { path: '', component: RegisterComponent },
  { path: 'login', component: LoginComponent },
  { path: 'profile', component: ProfileComponent }
];

@NgModule({
  declarations: [
    AppComponent,
    RegisterComponent,
    LoginComponent,
    ProfileComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    RouterModule.forRoot(routes)
  ],
  providers: [AuthService],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

---

## **Step 4: Implement Authentication Service (`auth.service.ts`)**  
Modify `src/app/auth.service.ts`:
```typescript
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private isAuthenticated = false;
  private userData: any = null;

  register(user: any) {
    localStorage.setItem('user', JSON.stringify(user));
  }

  login(username: string, password: string): boolean {
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    if (user.username === username && user.password === password) {
      this.isAuthenticated = true;
      this.userData = user;
      return true;
    }
    return false;
  }

  getUserData() {
    return this.userData;
  }

  isLoggedIn() {
    return this.isAuthenticated;
  }
}
```

---

## **Step 5: Create Registration Component (`register.component.ts`)**
Modify `src/app/register/register.component.ts`:
```typescript
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../auth.service';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent {
  user = { username: '', email: '', password: '' };

  constructor(private authService: AuthService, private router: Router) {}

  register() {
    this.authService.register(this.user);
    alert('Registration Successful! Please log in.');
    this.router.navigate(['/login']);
  }
}
```

Modify `src/app/register/register.component.html`:
```html
<div class="container">
  <h2>Register</h2>
  <input type="text" [(ngModel)]="user.username" placeholder="Username" required>
  <input type="email" [(ngModel)]="user.email" placeholder="Email" required>
  <input type="password" [(ngModel)]="user.password" placeholder="Password" required>
  <button (click)="register()">Register</button>
</div>
```

---

## **Step 6: Create Login Component (`login.component.ts`)**
Modify `src/app/login/login.component.ts`:
```typescript
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  username: string = '';
  password: string = '';
  errorMessage: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  login() {
    if (this.authService.login(this.username, this.password)) {
      this.router.navigate(['/profile']);
    } else {
      this.errorMessage = 'Invalid Username or Password!';
    }
  }
}
```

Modify `src/app/login/login.component.html`:
```html
<div class="container">
  <h2>Login</h2>
  <input type="text" [(ngModel)]="username" placeholder="Username" required>
  <input type="password" [(ngModel)]="password" placeholder="Password" required>
  <button (click)="login()">Login</button>
  <p *ngIf="errorMessage">{{ errorMessage }}</p>
</div>
```

---

## **Step 7: Create Profile Component (`profile.component.ts`)**
Modify `src/app/profile/profile.component.ts`:
```typescript
import { Component } from '@angular/core';
import { AuthService } from '../auth.service';

@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.css']
})
export class ProfileComponent {
  user: any;

  constructor(private authService: AuthService) {
    this.user = this.authService.getUserData();
  }
}
```

Modify `src/app/profile/profile.component.html`:
```html
<div class="container">
  <h2>Profile</h2>
  <p><strong>Username:</strong> {{ user.username }}</p>
  <p><strong>Email:</strong> {{ user.email }}</p>
</div>
```

---

## **Step 8: Add Styling for Components**
Modify `src/styles.css`:
```css
.container {
  max-width: 400px;
  margin: auto;
  padding: 20px;
  text-align: center;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);
}

h2 {
  margin-bottom: 10px;
}

input {
  width: 100%;
  padding: 8px;
  margin: 10px 0;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
}

button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}
```

---

## **Step 9: Run the Application**
Start the Angular server:
```sh
ng serve
```
Go to **http://localhost:4200/** and test the **registration, login, and profile** features.

---

## **ðŸŽ‰ Features Implemented**
âœ… **User Registration**  
âœ… **User Login**  
âœ… **Profile Page Display**  
âœ… **Local Storage for Persistence**  
âœ… **Angular Routing**  
âœ… **Two-way Data Binding (`ngModel`)**  

This is a **basic authentication system**. Let me know if you want **backend integration** for a **database & authentication** ðŸš€
