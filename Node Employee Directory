### **Project: Employee Directory using Node.js and JSON API**  
This project involves building an **Employee Directory** where employee details are stored in a JSON file, served via a **Node.js API**, and displayed on a front-end web page.

---

## **📌 Step 1: Setup the Project**
1. Create a new project folder:
   ```sh
   mkdir employee-directory
   cd employee-directory
   ```
2. Initialize a Node.js project:
   ```sh
   npm init -y
   ```
3. Install necessary dependencies:
   ```sh
   npm install express cors
   ```

---

## **📌 Step 2: Project Structure**
```
employee-directory
│── public
│   ├── index.html
│   ├── styles.css
│   ├── script.js
│── data
│   ├── employees.json
│── server.js
│── package.json
```
- `data/employees.json` → Stores employee details.
- `public/` → Front-end files (HTML, CSS, JS).
- `server.js` → Node.js API server.

---

## **📌 Step 3: Create Employee Data (JSON)**
Inside `data/employees.json`, add employee details:

```json
[
  {
    "id": 1,
    "name": "John Doe",
    "designation": "Software Engineer",
    "department": "IT",
    "salary": "$80,000",
    "image": "images/john.jpg"
  },
  {
    "id": 2,
    "name": "Jane Smith",
    "designation": "Project Manager",
    "department": "Management",
    "salary": "$100,000",
    "image": "images/jane.jpg"
  }
]
```

---

## **📌 Step 4: Create the Node.js API Server**
Inside `server.js`, add the following code:

```js
const express = require("express");
const cors = require("cors");
const fs = require("fs");
const path = require("path");

const app = express();
const PORT = 3000;

// Middleware
app.use(cors()); // Enable CORS for front-end requests
app.use(express.json()); // Parse JSON requests
app.use(express.static(path.join(__dirname, "public"))); // Serve static files

// Route to fetch employee data
app.get("/api/employees", (req, res) => {
    fs.readFile("./data/employees.json", "utf8", (err, data) => {
        if (err) {
            res.status(500).json({ message: "Error reading employee data" });
        } else {
            res.json(JSON.parse(data));
        }
    });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running at http://localhost:${PORT}`);
});
```

---

## **📌 Step 5: Create the Front-end**
### **🖥 HTML (public/index.html)**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Directory</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Employee Directory</h1>
    <div id="employee-container"></div>
    <script src="script.js"></script>
</body>
</html>
```

---

### **🎨 CSS (public/styles.css)**
```css
body {
    font-family: Arial, sans-serif;
    text-align: center;
    background-color: #f4f4f4;
}
h1 {
    color: #333;
}
#employee-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}
.employee-card {
    background: white;
    padding: 15px;
    margin: 10px;
    border-radius: 8px;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
    width: 250px;
    text-align: center;
}
.employee-card img {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
}
```

---

### **📝 JavaScript (public/script.js)**
```js
document.addEventListener("DOMContentLoaded", () => {
    fetch("http://localhost:3000/api/employees")
        .then(response => response.json())
        .then(data => displayEmployees(data))
        .catch(error => console.error("Error fetching employee data:", error));
});

function displayEmployees(employees) {
    const container = document.getElementById("employee-container");
    container.innerHTML = "";
    
    employees.forEach(employee => {
        const card = document.createElement("div");
        card.className = "employee-card";
        
        card.innerHTML = `
            <img src="${employee.image}" alt="${employee.name}">
            <h3>${employee.name}</h3>
            <p>${employee.designation}</p>
            <p><strong>Dept:</strong> ${employee.department}</p>
            <p><strong>Salary:</strong> ${employee.salary}</p>
        `;
        
        container.appendChild(card);
    });
}
```

---

## **📌 Step 6: Run the Application**
1. Start the server:
   ```sh
   node server.js
   ```
2. Open a browser and visit:
   ```
   http://localhost:3000
   ```

---

## **📌 Step 7: Optional Enhancements**
🔹 Add a **search feature** for employees.  
🔹 Implement **sorting/filtering** (by department, salary).  
🔹 Store employee data in a **MongoDB database** instead of a JSON file.  

Would you like me to add any extra features? 🚀
