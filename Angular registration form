Let's build a **User Registration Form** in **Angular** using **Reactive Forms** with **real-time validation** for:  
- **Email** (must be a valid format)  
- **Password** (minimum 6 characters)  
- **Phone Number** (must be 10 digits)  

I'll guide you **step by step** to set this up in **VS Code**.

---

## **Step 1: Install Angular CLI & Create Project**  
### **1.1 Install Angular CLI (if not already installed)**  
```sh
npm install -g @angular/cli
```
### **1.2 Create a new Angular project**  
```sh
ng new registration-app
cd registration-app
```
### **1.3 Start the Angular development server**  
```sh
ng serve
```
Now open **http://localhost:4200/** in your browser.

---

## **Step 2: Create the Registration Component**  
Generate a new component for the registration form:  
```sh
ng generate component registration
```
or  
```sh
ng g c registration
```
This creates:  
```
src/app/registration/
  â”œâ”€â”€ registration.component.ts
  â”œâ”€â”€ registration.component.html
  â”œâ”€â”€ registration.component.css
  â””â”€â”€ registration.component.spec.ts
```

---

## **Step 3: Install `ReactiveFormsModule`**  
Since we are using **Reactive Forms**, open `src/app/app.module.ts` and **import** `ReactiveFormsModule`:

```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { RegistrationComponent } from './registration/registration.component';
import { ReactiveFormsModule } from '@angular/forms';  // Import ReactiveFormsModule

@NgModule({
  declarations: [
    AppComponent,
    RegistrationComponent
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule  // Add ReactiveFormsModule here
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

---

## **Step 4: Create the Registration Form in `registration.component.ts`**  
Replace the contents of `registration.component.ts` with:

```typescript
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent {
  registrationForm: FormGroup;

  constructor(private fb: FormBuilder) {
    this.registrationForm = this.fb.group({
      username: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      phone: ['', [Validators.required, Validators.pattern(/^\d{10}$/)]],
    });
  }

  get f() {
    return this.registrationForm.controls;
  }

  onSubmit() {
    if (this.registrationForm.valid) {
      console.log('Form Submitted', this.registrationForm.value);
      alert('Registration Successful!');
    } else {
      alert('Please fill out the form correctly.');
    }
  }
}
```

---

## **Step 5: Create the Registration Form UI in `registration.component.html`**  
Replace the contents of `registration.component.html` with:

```html
<div class="container">
  <h2>User Registration</h2>
  
  <form [formGroup]="registrationForm" (ngSubmit)="onSubmit()">
    <div>
      <label>Username</label>
      <input type="text" formControlName="username" placeholder="Enter username" />
      <small *ngIf="f.username.invalid && f.username.touched" class="error">
        Username must be at least 3 characters long.
      </small>
    </div>

    <div>
      <label>Email</label>
      <input type="email" formControlName="email" placeholder="Enter email" />
      <small *ngIf="f.email.invalid && f.email.touched" class="error">
        Please enter a valid email.
      </small>
    </div>

    <div>
      <label>Password</label>
      <input type="password" formControlName="password" placeholder="Enter password" />
      <small *ngIf="f.password.invalid && f.password.touched" class="error">
        Password must be at least 6 characters.
      </small>
    </div>

    <div>
      <label>Phone</label>
      <input type="text" formControlName="phone" placeholder="Enter phone number" />
      <small *ngIf="f.phone.invalid && f.phone.touched" class="error">
        Phone number must be 10 digits.
      </small>
    </div>

    <button type="submit" [disabled]="registrationForm.invalid">Register</button>
  </form>
</div>
```

---

## **Step 6: Add Styling in `registration.component.css`**
Replace `registration.component.css` with:

```css
.container {
  max-width: 400px;
  margin: auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);
}

h2 {
  text-align: center;
}

input {
  width: 100%;
  padding: 8px;
  margin: 5px 0;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-top: 10px;
}

button:disabled {
  background-color: #ccc;
}

.error {
  color: red;
  font-size: 12px;
}
```

---

## **Step 7: Display the Registration Component in `app.component.html`**  
Open `src/app/app.component.html` and replace its contents with:

```html
<app-registration></app-registration>
```

---

## **Step 8: Run the Application**  
Go to VS Code terminal and start the Angular server:
```sh
ng serve
```
Now open **http://localhost:4200/** in your browser.

ðŸŽ‰ **Your Angular User Registration Form is Live!** ðŸŽ‰

---

## **Features Implemented:**
âœ… **Reactive Forms** (with FormBuilder)  
âœ… **Real-Time Validation**  
âœ… **Username: Min 3 characters**  
âœ… **Email: Must be valid**  
âœ… **Password: Min 6 characters**  
âœ… **Phone: Must be 10 digits**  
âœ… **Disabled Submit Button if Form is Invalid**  
âœ… **Simple & Responsive UI**  

---

### **Need Backend Integration?**  
We can extend this form to **send user data to a server via HTTP POST request** using `HttpClientModule`. Let me know if you need that! ðŸš€
